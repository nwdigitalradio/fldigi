// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "dx_dialog.h"
#include "configuration.h"
#include "dx_cluster.h"

Fl_Input2 *inp_dxcc_host_url=(Fl_Input2 *)0;

static void cb_inp_dxcc_host_url(Fl_Input2* o, void*) {
  progdefaults.dxcc_host_url=o->value();
progdefaults.changed = true;
}

Fl_Input2 *inp_dccc_host_port=(Fl_Input2 *)0;

static void cb_inp_dccc_host_port(Fl_Input2* o, void*) {
  progdefaults.dxcc_host_port=o->value();
progdefaults.changed = true;
}

Fl_Input2 *inp_dccc_login=(Fl_Input2 *)0;

static void cb_inp_dccc_login(Fl_Input2* o, void*) {
  progdefaults.dxcc_login=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_dxcc_connect=(Fl_Check_Button *)0;

static void cb_btn_dxcc_connect(Fl_Check_Button* o, void*) {
  progStatus.cluster_connected=o->value();
DXcluster_connect(o->value());
}

Fl_Browser *brws_dx_cluster=(Fl_Browser *)0;

static void cb_brws_dx_cluster(Fl_Browser*, void*) {
  DXcluster_select();
}

Fl_Button *btn_dxc_cluster_clear=(Fl_Button *)0;

static void cb_btn_dxc_cluster_clear(Fl_Button*, void*) {
  brws_dx_cluster->clear();
}

Fl_Browser *brws_tcpip_stream=(Fl_Browser *)0;

Fl_Button *btn_dxc_tcpip_clear=(Fl_Button *)0;

static void cb_btn_dxc_tcpip_clear(Fl_Button*, void*) {
  brws_tcpip_stream->clear();
}

Fl_Browser *brws_dxc_wwv=(Fl_Browser *)0;

Fl_Button *btn_dxc_wwv_query=(Fl_Button *)0;

static void cb_btn_dxc_wwv_query(Fl_Button*, void*) {
  dxc_wwv_query();
}

Fl_Button *btn_dxc_wwv_clear=(Fl_Button *)0;

static void cb_btn_dxc_wwv_clear(Fl_Button*, void*) {
  dxc_wwv_clear();
}

Fl_Browser *brws_dxc_help=(Fl_Browser *)0;

Fl_Button *btn_dxc_help_query=(Fl_Button *)0;

static void cb_btn_dxc_help_query(Fl_Button*, void*) {
  dxc_help_query();
}

Fl_Input2 *inp_help_string=(Fl_Input2 *)0;

Fl_Button *btn_dxc_help_clear=(Fl_Button *)0;

static void cb_btn_dxc_help_clear(Fl_Button*, void*) {
  dxc_help_clear();
}

Fl_Input2 *inp_dxcluster_cmd=(Fl_Input2 *)0;

Fl_Button *btn_cluster_submit=(Fl_Button *)0;

static void cb_btn_cluster_submit(Fl_Button*, void*) {
  DXcluster_submit();
}

Fl_Button *btn_cluster_spot=(Fl_Button *)0;

static void cb_btn_cluster_spot(Fl_Button*, void*) {
  send_DXcluster_spot();
}

Fl_Double_Window* dxc_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(625, 395, "DX Cluster Spotting");
    w = o;
    { Fl_Group* o = new Fl_Group(2, 2, 621, 57);
      o->box(FL_ENGRAVED_BOX);
      { Fl_Input2* o = inp_dxcc_host_url = new Fl_Input2(10, 25, 382, 24, "Telnet URL");
        inp_dxcc_host_url->tooltip("telnet server URL");
        inp_dxcc_host_url->box(FL_DOWN_BOX);
        inp_dxcc_host_url->color(FL_BACKGROUND2_COLOR);
        inp_dxcc_host_url->selection_color(FL_SELECTION_COLOR);
        inp_dxcc_host_url->labeltype(FL_NORMAL_LABEL);
        inp_dxcc_host_url->labelfont(0);
        inp_dxcc_host_url->labelsize(14);
        inp_dxcc_host_url->labelcolor(FL_FOREGROUND_COLOR);
        inp_dxcc_host_url->callback((Fl_Callback*)cb_inp_dxcc_host_url);
        inp_dxcc_host_url->align(Fl_Align(FL_ALIGN_TOP));
        inp_dxcc_host_url->when(FL_WHEN_RELEASE);
        o->value(progdefaults.dxcc_host_url.c_str());
      } // Fl_Input2* inp_dxcc_host_url
      { Fl_Input2* o = inp_dccc_host_port = new Fl_Input2(400, 25, 60, 24, "Port");
        inp_dccc_host_port->tooltip("telnet server port");
        inp_dccc_host_port->box(FL_DOWN_BOX);
        inp_dccc_host_port->color(FL_BACKGROUND2_COLOR);
        inp_dccc_host_port->selection_color(FL_SELECTION_COLOR);
        inp_dccc_host_port->labeltype(FL_NORMAL_LABEL);
        inp_dccc_host_port->labelfont(0);
        inp_dccc_host_port->labelsize(14);
        inp_dccc_host_port->labelcolor(FL_FOREGROUND_COLOR);
        inp_dccc_host_port->callback((Fl_Callback*)cb_inp_dccc_host_port);
        inp_dccc_host_port->align(Fl_Align(FL_ALIGN_TOP));
        inp_dccc_host_port->when(FL_WHEN_RELEASE);
        o->value(progdefaults.dxcc_host_port.c_str());
      } // Fl_Input2* inp_dccc_host_port
      { Fl_Input2* o = inp_dccc_login = new Fl_Input2(469, 25, 60, 24, "Login as");
        inp_dccc_login->tooltip("login call sign");
        inp_dccc_login->box(FL_DOWN_BOX);
        inp_dccc_login->color(FL_BACKGROUND2_COLOR);
        inp_dccc_login->selection_color(FL_SELECTION_COLOR);
        inp_dccc_login->labeltype(FL_NORMAL_LABEL);
        inp_dccc_login->labelfont(0);
        inp_dccc_login->labelsize(14);
        inp_dccc_login->labelcolor(FL_FOREGROUND_COLOR);
        inp_dccc_login->callback((Fl_Callback*)cb_inp_dccc_login);
        inp_dccc_login->align(Fl_Align(FL_ALIGN_TOP));
        inp_dccc_login->when(FL_WHEN_RELEASE);
        o->value(progdefaults.dxcc_login.c_str());
      } // Fl_Input2* inp_dccc_login
      { Fl_Check_Button* o = btn_dxcc_connect = new Fl_Check_Button(534, 29, 70, 15, "Connect");
        btn_dxcc_connect->tooltip("Connect / Disconnect");
        btn_dxcc_connect->down_box(FL_DOWN_BOX);
        btn_dxcc_connect->callback((Fl_Callback*)cb_btn_dxcc_connect);
        o->value(progStatus.cluster_connected);
      } // Fl_Check_Button* btn_dxcc_connect
      o->end();
    } // Fl_Group* o
    { Fl_Tabs* o = new Fl_Tabs(2, 60, 621, 307);
      { Fl_Group* o = new Fl_Group(2, 84, 621, 282, "DX Reports");
        o->hide();
        { brws_dx_cluster = new Fl_Browser(4, 88, 617, 254);
          brws_dx_cluster->tooltip("Left Click to select SPOT");
          brws_dx_cluster->type(2);
          brws_dx_cluster->textfont(4);
          brws_dx_cluster->callback((Fl_Callback*)cb_brws_dx_cluster);
          brws_dx_cluster->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
        } // Fl_Browser* brws_dx_cluster
        { btn_dxc_cluster_clear = new Fl_Button(294, 343, 70, 22, "Clear");
          btn_dxc_cluster_clear->tooltip("Clear parsed data stream");
          btn_dxc_cluster_clear->callback((Fl_Callback*)cb_btn_dxc_cluster_clear);
        } // Fl_Button* btn_dxc_cluster_clear
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(2, 84, 621, 283, "TelNet stream");
        o->hide();
        { brws_tcpip_stream = new Fl_Browser(4, 88, 617, 254);
          brws_tcpip_stream->type(2);
          brws_tcpip_stream->textfont(4);
          brws_tcpip_stream->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
          Fl_Group::current()->resizable(brws_tcpip_stream);
        } // Fl_Browser* brws_tcpip_stream
        { btn_dxc_tcpip_clear = new Fl_Button(294, 343, 70, 22, "Clear");
          btn_dxc_tcpip_clear->tooltip("Clear tcpip stream");
          btn_dxc_tcpip_clear->callback((Fl_Callback*)cb_btn_dxc_tcpip_clear);
        } // Fl_Button* btn_dxc_tcpip_clear
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(2, 84, 621, 283, "Sunspot");
        { brws_dxc_wwv = new Fl_Browser(4, 88, 617, 254);
          brws_dxc_wwv->type(2);
          brws_dxc_wwv->textfont(4);
          brws_dxc_wwv->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
          Fl_Group::current()->resizable(brws_dxc_wwv);
        } // Fl_Browser* brws_dxc_wwv
        { btn_dxc_wwv_query = new Fl_Button(439, 343, 70, 22, "Update");
          btn_dxc_wwv_query->tooltip("Get WWV sunspot events");
          btn_dxc_wwv_query->callback((Fl_Callback*)cb_btn_dxc_wwv_query);
        } // Fl_Button* btn_dxc_wwv_query
        { btn_dxc_wwv_clear = new Fl_Button(515, 343, 70, 22, "Clear");
          btn_dxc_wwv_clear->tooltip("Clear help panel");
          btn_dxc_wwv_clear->callback((Fl_Callback*)cb_btn_dxc_wwv_clear);
        } // Fl_Button* btn_dxc_wwv_clear
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(2, 84, 621, 283, "Help");
        o->hide();
        { brws_dxc_help = new Fl_Browser(4, 88, 617, 254);
          brws_dxc_help->type(2);
          brws_dxc_help->textfont(4);
          brws_dxc_help->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
          Fl_Group::current()->resizable(brws_dxc_help);
        } // Fl_Browser* brws_dxc_help
        { btn_dxc_help_query = new Fl_Button(439, 343, 70, 22, "Get Help");
          btn_dxc_help_query->tooltip("Get WWV sunspot events");
          btn_dxc_help_query->callback((Fl_Callback*)cb_btn_dxc_help_query);
        } // Fl_Button* btn_dxc_help_query
        { inp_help_string = new Fl_Input2(265, 343, 170, 22, "Help on:");
          inp_help_string->tooltip("Leave blank for general help\nEnter subject, e.g. DX");
          inp_help_string->box(FL_DOWN_BOX);
          inp_help_string->color(FL_BACKGROUND2_COLOR);
          inp_help_string->selection_color(FL_SELECTION_COLOR);
          inp_help_string->labeltype(FL_NORMAL_LABEL);
          inp_help_string->labelfont(0);
          inp_help_string->labelsize(14);
          inp_help_string->labelcolor(FL_FOREGROUND_COLOR);
          inp_help_string->align(Fl_Align(FL_ALIGN_LEFT));
          inp_help_string->when(FL_WHEN_RELEASE);
        } // Fl_Input2* inp_help_string
        { btn_dxc_help_clear = new Fl_Button(515, 343, 70, 22, "Clear");
          btn_dxc_help_clear->tooltip("Clear help panel");
          btn_dxc_help_clear->callback((Fl_Callback*)cb_btn_dxc_help_clear);
        } // Fl_Button* btn_dxc_help_clear
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { inp_dxcluster_cmd = new Fl_Input2(45, 369, 391, 24, "Cmd:");
      inp_dxcluster_cmd->tooltip("Command string");
      inp_dxcluster_cmd->box(FL_DOWN_BOX);
      inp_dxcluster_cmd->color(FL_BACKGROUND2_COLOR);
      inp_dxcluster_cmd->selection_color(FL_SELECTION_COLOR);
      inp_dxcluster_cmd->labeltype(FL_NORMAL_LABEL);
      inp_dxcluster_cmd->labelfont(0);
      inp_dxcluster_cmd->labelsize(14);
      inp_dxcluster_cmd->labelcolor(FL_FOREGROUND_COLOR);
      inp_dxcluster_cmd->align(Fl_Align(FL_ALIGN_LEFT));
      inp_dxcluster_cmd->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inp_dxcluster_cmd
    { btn_cluster_submit = new Fl_Button(439, 369, 70, 24, "Submit");
      btn_cluster_submit->tooltip("Send command to server");
      btn_cluster_submit->callback((Fl_Callback*)cb_btn_cluster_submit);
    } // Fl_Button* btn_cluster_submit
    { btn_cluster_spot = new Fl_Button(553, 369, 70, 24, "Spot");
      btn_cluster_spot->tooltip("Send SPOT string to server");
      btn_cluster_spot->callback((Fl_Callback*)cb_btn_cluster_spot);
    } // Fl_Button* btn_cluster_spot
    o->end();
    o->resizable(o);
  } // Fl_Double_Window* o
  return w;
}
